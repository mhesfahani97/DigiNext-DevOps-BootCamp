# Global configuration settings for HAProxy
global
    log             127.0.0.1 local2   # Logging configuration to send logs to local2 facility

    chroot          /var/lib/haproxy   # Chroot directory for HAProxy
    pidfile         /var/run/haproxy.pid   # Path to the PID file
    maxconn         4000   # Maximum number of concurrent connections allowed
    user            haproxy   # User under which HAProxy will run
    group           haproxy   # Group under which HAProxy will run
    daemon   # Run as a daemon process

# Default configuration settings for frontend and backend sections
defaults
    mode                    http   # Mode set to HTTP (Layer 7)
    log                     global   # Log settings (use global log configuration)
    option                  httplog   # Enable HTTP request logging
    option                  dontlognull   # Don't log null connections
    option http-server-close   # Close HTTP servers after each request
    option forwardfor       except 127.0.0.1/8   # Add X-Forwarded-For header except for local requests
    option                  redispatch   # Enable session redistribution in case of server failure
    retries                 3   # Number of connection retries before marking server as down
    timeout http-request    10s   # Maximum time to wait for an HTTP request
    timeout queue           1m   # Maximum time to wait in the queue
    timeout connect         10s   # Maximum time to establish a connection with a server
    timeout client          1m   # Maximum inactivity time on the client side
    timeout server          1m   # Maximum inactivity time on the server side
    timeout http-keep-alive 10s   # Maximum time to wait for a new HTTP request from a client
    timeout check           10s   # Timeout for health checks
    maxconn                 3000   # Maximum connections per backend server

# Frontend configuration for HAProxy
frontend main
    bind *:80   # Listen on all available IP addresses on port 80
    use_backend back_haproxy   # Use the specified backend for incoming requests

# Backend configuration for HAProxy
backend back_haproxy
    balance roundrobin   # Use round-robin load balancing algorithm
    server vm1  192.168.100.2:80 check   # Define server vm1 with its IP and port, perform health checks
    server vm2  192.168.100.3:80 check   # Define server vm2 with its IP and port, perform health checks

